[{"D:\\kamalReact\\reactpractice\\src\\index.js":"1","D:\\kamalReact\\reactpractice\\src\\reportWebVitals.js":"2","D:\\kamalReact\\reactpractice\\src\\App.js":"3","D:\\kamalReact\\reactpractice\\src\\OutputValue\\OutputValue.js":"4","D:\\kamalReact\\reactpractice\\src\\Person\\Person.js":"5","D:\\kamalReact\\reactpractice\\src\\TwoWayBindingInput\\TwoWayBindingInput.js":"6","D:\\kamalReact\\reactpractice\\src\\InputValue\\InputValue.js":"7","D:\\kamalReact\\reactpractice\\src\\Char\\Char.js":"8","D:\\kamalReact\\reactpractice\\src\\Validate\\Validate.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":4148,"mtime":1607626222186,"results":"13","hashOfConfig":"11"},{"size":157,"mtime":1607283339886,"results":"14","hashOfConfig":"11"},{"size":184,"mtime":1607288244301,"results":"15","hashOfConfig":"11"},{"size":210,"mtime":1607613797100,"results":"16","hashOfConfig":"11"},{"size":194,"mtime":1607283639513,"results":"17","hashOfConfig":"11"},{"size":391,"mtime":1607868151929,"results":"18","hashOfConfig":"11"},{"size":218,"mtime":1607624137292,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"z0i5qd",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"D:\\kamalReact\\reactpractice\\src\\index.js",[],["41","42"],"D:\\kamalReact\\reactpractice\\src\\reportWebVitals.js",[],"D:\\kamalReact\\reactpractice\\src\\App.js",["43"],"import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Person from './Person/Person'\n\nimport OutputValue from './OutputValue/OutputValue';\nimport InputValue from './InputValue/InputValue';\nimport TwoWayBindingInput from './TwoWayBindingInput/TwoWayBindingInput'\nimport Validate from './Validate/Validate'\nimport Char from './Char/Char';\n\nclass App extends Component {\n  constructor () {\n    super();\n    this.state = {\n        person : [\n          { name : \"nikka\", age : 28  },\n          { name : \"Chinda\", age : 28  },\n          { name : \"Bikker\", age : 28  },\n        ],\n        twowayBinding : [\n          {id: \"ffd\", name: \"Harnav\", age: 8},\n          {id: \"ssds\", name: \"Harshan\", age: 4},\n          {id: \"sdfsf\", name: \"Kamal\", age: 35}\n        ],\n        username : \"Sukha\"\n      }\n  }\n\n  UpdateNamesHandler = () => {\n    this.setState ({\n      person : [\n        { name : \"Jialu\", age : 28  },\n        { name : \"Pinder\", age : 28  },\n        { name : \"Sukha\", age : 28  },\n      ]\n    })\n  }\n\n  changeNameHndler = (event) => {\n    return (\n      this.setState({\n        username :  event.target.value\n      })\n    )\n  }\n\n  removePersonHandler = (key) => {\n      const person = [...this.state.person]\n      person.splice(key, 1);\n      this.setState({\n        person: person\n      })\n  }\n\n  twoWayBindingHandler = (event, id) => {\n    const getIndex = this.state.twowayBinding.findIndex(p => {\n      return p.id === id\n    })\n\n    const twoWay = {...this.state.twowayBinding[getIndex]}\n\n    twoWay.name = event.target.value;\n\n    const twoWayMain = [...this.state.twowayBinding];\n    twoWayMain[getIndex] = twoWay\n\n    this.setState({twowayBinding : twoWayMain})\n\n  }\n\n  removeCharHandler = (index) => {\n    const text = this.state.username.split('');\n    text.splice(index, 1)\n    const updatedText = text.join('');\n    this.setState({\n      username : updatedText\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <button onClick={this.UpdateNamesHandler}>Update Names</button>\n        {this.state.person.map((val, key) => {\n          return (\n            <div>\n              <Person name={val.name} click={() => this.removePersonHandler(key)}/>\n            </div>\n          );\n        })}\n        <hr/>\n          <h2>Twoway binding in List</h2>\n          {this.state.twowayBinding.map((val, key) => {\n            return (\n              <div>\n                <p id={val.id}>{val.name}</p>\n                <TwoWayBindingInput \n                  defaultVal={val.name} \n                  onchange = {(event) => this.twoWayBindingHandler(event, val.id)}/>\n              </div>\n            )\n          })}\n        <hr/>\n        <p>\n\n        <OutputValue name=\"kamal\"/>\n        <OutputValue name=\"Pinder\"/>\n        <OutputValue name={this.state.username}/>\n        <InputValue change = {this.changeNameHndler} currentVal = {this.state.username}/>\n        </p>\n\n        <hr/>\n        <ol>\n          <li>Create an input field (in App component) with a change listener which outputs the length of the entered text below it (e.g. in a paragraph).</li>\n          <li>Create a new component (=> ValidationComponent) which receives the text length as a prop</li>\n          <li>Inside the ValidationComponent, either output \"Text too short\" or \"Text long enough\" depending on the text length (e.g. take 5 as a minimum length)</li>\n          <li>Create another component (=> CharComponent) and style it as an inline box (=> display: inline-block, padding: 16px, text-align: center, margin: 16px, border: 1px solid black).</li>\n          <li>Render a list of CharComponents where each CharComponent receives a different letter of the entered text (in the initial input field) as a prop.</li>\n          <li>When you click a CharComponent, it should be removed from the entered text.</li>\n        </ol>\n          <p>&nbsp;</p>\n          <p>&nbsp;</p>\n\n          {this.state.username.split('').map((val, key) => <Char value={val} clicked={() => this.removeCharHandler(key)}/>)}\n          <Validate charLength={this.state.username.length}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","D:\\kamalReact\\reactpractice\\src\\OutputValue\\OutputValue.js",[],"D:\\kamalReact\\reactpractice\\src\\Person\\Person.js",[],"D:\\kamalReact\\reactpractice\\src\\TwoWayBindingInput\\TwoWayBindingInput.js",[],"D:\\kamalReact\\reactpractice\\src\\InputValue\\InputValue.js",[],"D:\\kamalReact\\reactpractice\\src\\Char\\Char.js",["44"],"import React from 'react';\r\nimport style from './Char.css'\r\n\r\nconst Char = (props) => {\r\n    const style = {\r\n        display : \"inline-block\",\r\n        margin : \"10px\",\r\n        padding: \"10px\",\r\n        border: \"1px solid #000\"\r\n    }\r\n    return (\r\n        <div  className={style.boxes} onClick={props.clicked}>\r\n            {props.value}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Char","D:\\kamalReact\\reactpractice\\src\\Validate\\Validate.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":2,"column":8,"nodeType":"51","messageId":"52","endLine":2,"endColumn":12},{"ruleId":"49","severity":1,"message":"53","line":2,"column":8,"nodeType":"51","messageId":"52","endLine":2,"endColumn":13},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'style' is defined but never used.","no-global-assign","no-unsafe-negation"]